"""
src/calibrate_thresholds.py

Compute adaptive thresholds for frame filters based on per-frame metrics logged in frame_by_frame.csv.

Usage:
    python src/calibrate_thresholds.py

Will print recommended values for:
- EPSILON_BLACK
- EPSILON_WHITE
- THRESHOLD_BLUR
- THRESHOLD_NOISE
- THRESHOLD_DUP
"""

import pandas as pd
from pathlib import Path

# Path to the per-frame log CSV generated by main.py
LOG_CSV = Path("logs") / "frame_by_frame.csv"

# Percentile settings for adaptive thresholding
PCT_BLACK = 0.01       # drop nearly-black frames below this percentile
PCT_WHITE = 0.99       # drop nearly-white frames above this percentile
PCT_BLUR = 0.05        # drop blurry frames below this percentile
PCT_NOISE = 0.95       # drop noisy frames above this percentile
PCT_DUP = 0.99         # drop near-duplicates above this percentile


def calibrate_thresholds(log_csv_path: Path):
    """
    Read per-frame metrics and compute adaptive thresholds.
    Returns a dict of recommended values.
    """
    df = pd.read_csv(log_csv_path)

    # Ensure numeric columns
    df['mean_intensity'] = pd.to_numeric(df['mean_intensity'], errors='coerce')
    df['var_lap'] = pd.to_numeric(df['var_lap'], errors='coerce')
    df['noise_metric'] = pd.to_numeric(df['noise_metric'], errors='coerce')
    df['hist_corr'] = pd.to_numeric(df['hist_corr'], errors='coerce')

    # Calculate percentiles
    epsilon_black = df['mean_intensity'].quantile(PCT_BLACK)
    epsilon_white = df['mean_intensity'].quantile(PCT_WHITE)
    threshold_blur = df['var_lap'].quantile(PCT_BLUR)
    threshold_noise = df['noise_metric'].quantile(PCT_NOISE)
    threshold_dup = df['hist_corr'].dropna().quantile(PCT_DUP)

    # Print recommendations
    print("=== Adaptive Threshold Recommendations ===")
    print(
        f"EPSILON_BLACK (1st percentile of mean_intensity): {epsilon_black:.2f}")
    print(
        f"EPSILON_WHITE (99th percentile of mean_intensity): {epsilon_white:.2f}")
    print(f"THRESHOLD_BLUR (5th percentile of var_lap): {threshold_blur:.2f}")
    print(
        f"THRESHOLD_NOISE (95th percentile of noise_metric): {threshold_noise:.2f}")
    print(f"THRESHOLD_DUP (99th percentile of hist_corr): {threshold_dup:.4f}")

    return {
        'EPSILON_BLACK': float(epsilon_black),
        'EPSILON_WHITE': float(epsilon_white),
        'THRESHOLD_BLUR': float(threshold_blur),
        'THRESHOLD_NOISE': float(threshold_noise),
        'THRESHOLD_DUP': float(threshold_dup)
    }


def main():
    if not LOG_CSV.exists():
        raise FileNotFoundError(f"Log file not found at {LOG_CSV}")

    recommendations = calibrate_thresholds(LOG_CSV)
    # You may copy these values into src/filters.py


if __name__ == '__main__':
    main()
